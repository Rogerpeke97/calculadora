[{"C:\\Users\\Laura\\Desktop\\calc\\calculadora\\src\\index.js":"1","C:\\Users\\Laura\\Desktop\\calc\\calculadora\\src\\App.js":"2","C:\\Users\\Laura\\Desktop\\calc\\calculadora\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":12724,"mtime":1608683498873,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1gzot6z",{"filePath":"11","messages":"12","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\Laura\\Desktop\\calc\\calculadora\\src\\index.js",[],["17","18"],"C:\\Users\\Laura\\Desktop\\calc\\calculadora\\src\\App.js",["19","20","21","22"],"import {useState, useRef, useEffect} from 'react';\nimport './App.css';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport { faChild, faDiagnoses, faTrophy, faSignOutAlt, faMouse } from '@fortawesome/free-solid-svg-icons'\n\n\nlet style = {\n    littleSquares: {\n      flex: \"25%\",\n      boxShadow: \"0 12px gray\",\n      background: \"linear-gradient(-45deg, rgba(0,0,0,0.22), brown)\",\n      transition: 'all 0.2s ease-out',\n      borderRadius: \"15px\",\n      marginTop: \"13px\",\n      cursor: \"pointer\",\n      marginLeft: \"11px\",\n      marginRight: \"11px\"\n    },\n    calculadoraContainer:{\n        background: \"linear-gradient(-45deg, rgba(0,0,0,0.22), rgba(200,90,100,0.25))\",\n        paddingBottom:\"20px\",\n        borderRadius: \"20px\",\n        boxShadow: \"6px 6px 6px 0px rgb(70, 70, 70), 15px 15px 16px 0px #000000\",\n        display: \"grid\",\n        minHeight:\"400px\",\n        maxHeight:\"400px\",\n        minWidth:\"320px\",\n        maxWidth:\"320px\",\n        color: \"white\",\n        fontWeight: \"bold\",\n        textShadow: \"2px 2px 2px black\",\n        position: \"relative\"\n    },\n    topBottomButtons:{\n        flex:\"25%\",\n        cursor: \"pointer\",\n        background: \"linear-gradient(-45deg, rgba(0,0,0,0.22), brown)\", \n        borderRadius: \"15px\",\n        boxShadow: \"0 12px gray\",\n        marginTop: \"13px\",\n        marginLeft: \"17px\",\n        marginRight: \"11px\",\n        marginBottom: \"11px\"\n    },\n    largeButtons: {\n        flex:\"87%\",\n        cursor: \"pointer\",\n        boxShadow: \"0 12px gray\",\n        marginTop: \"13px\",\n        marginBottom: \"5px\",\n        marginLeft: \"11px\",\n        marginRight: \"7px\",\n        borderRadius: \"15px\",\n        background: \"linear-gradient(-45deg, rgba(0,0,0,0.22), brown)\", \n    },\n    input:{\n        textAlign: \"right\",\n        display: \"grid\",\n        backgroundColor: \"black\",\n        borderRadius: \"15px\",\n        boxShadow: \"2.5px 2.5px 3px 0px #000000\",\n        color: \"white\",\n        width: \"314px\",\n        height: \"50px\",\n        marginBottom: \"5%\",\n        border: \"0px\",\n        fontSize: \"1.3rem\",\n        marginTop: \"5%\",\n        outline: \"none\",\n        appereance: \"none\"\n    },\n    fontAwesomeDrag: {\n        color: \"white\",\n        cursor: \"grab\",\n        transition: \"all 0.5s ease-out\",\n\n    },\n    fontAwesomeDragGrab: {\n        color: \"black\",\n        cursor: \"grabbing\"\n    }\n\n}\n\nfunction App() {\n    let checkIfMathExpression = (e) => {//CHEQUEAR SI EL INPUT INGRESADO ES UNA EXPRESION MATEMATICA\n        let array = [\"*\", \"/\", \"+\", \"-\"]\n        for (let i = 0; i < array.length; i++) {\n            if (e === array[i]) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // AÑADIR NUMEROS PARA EL INPUT MANUAL \n    let addNumbersManual = (numero)=>{\n        if(input.toString().length === 20){\n        setInput(input);\n        }\n        else{\n            setInput(parseInt(input + numero), 10);\n        }\n    }\n\n\n    let inputCheck = (value)=>{\n      if (isNaN(value) && checkIfMathExpression(value) === true) {\n        //SI EL ULTIMO CARACTER AGREGADO ES UNA EXPRESION MATEMATICA ENTONCES APLICA LA FUNCION SOLVEMATH\n        //EL SLICE ES PARA CHEQUEAR QUE ANTES DE LA EXPRESION HAY UN NUMERO VALIDO PARA REALIZAR LA OPERACION Y TAMBIEN PARA VERIFICAR SI ES UNA EXPRESION\n        //MATEMATICA O NO\n          setMathOperation(value);\n          solveMath(input);\n      } \n      else if (isNaN(value) && checkIfMathExpression(value) === false) {\n         // EN CASO DE QUE EL CARACTER INGRESADO NO SEA UNA EXPRESION MATEMATICA SE HACE DISPLAY DEL MENSAJE DE ERROR Y\n         // SE ELIMINAN LOS VALORES GUARDADOS DE LA OPERACION ANTERIOR\n          setValue(\"\");\n          setMathOperation(\"\");\n          setInput(\"\");\n          setMessage(\"La calculadora sólo acepta números y símbolos matematicos!\")\n      }\n      else{\n          addNumbersManual(value);\n          setMessage(\"\")\n      }\n    }\n\n\n    const [input,\n        setInput] = useState(0)//INPUT DEL USUARIO\n\n\n    const [message,\n        setMessage] = useState(\"\")// MENSAJE DE ERROR EN CASO QUE SE INGRESE UN VALOR NO PERMITIDO\n\n\n    const [mathOperation,\n        setMathOperation] = useState(null)//TIPO DE OPERACION MATEMATICA GUARDADA LUEGO DE INGRESARLA PARA APLICARLA AL INGRESAR OTRO NUMERO\n\n\n    const [savedValue,\n        setValue] = useState(\"\")//VALOR GUARDADO LUEGO DE INGRESAR UNA EXPRESION MATEMATICA PARA LUEGO APLICARLA EN LA FUNCION SOLVEMATH()\n\n\n    const focusInput = useRef(0);// PARA QUE CUANDO EL FOCUS DEL INPUT SE PIERDE SE VUELVA A ACTIVAR, ASI LA CALCULADORA ES INTERACTIVA CON EL TECLADO\n\n\n    let solveMath = (passedValue) => {// RESUELVE EL CALCULO DEPENDIENDO LA EXPRESION\n        if (mathOperation !== \"\" && savedValue !== \"\") {// EN EL CASO DE QUE HAYA UN VALOR GUARDADO Y HAYA UNA EXPRESION MATEMATICA, SE REALIZA EL CALCULO\n            switch (mathOperation) {\n                case \"-\":\n                    setInput(savedValue - parseInt(passedValue));\n                    setMathOperation(\"\");\n                    break\n                case \"+\":\n                    setInput(savedValue + parseInt(passedValue));\n                    setMathOperation(\"\");\n                    break\n                case \"/\":\n                    setInput(savedValue / parseInt(passedValue));\n                    setMathOperation(\"\");\n                    break\n                case \"*\":\n                    setInput(savedValue * parseInt(passedValue));\n                    setMathOperation(\"\");\n                    break\n                default:\n                    console.log(\"error\")\n            }\n        } else {\n            setValue(passedValue)\n            setInput(\"\")\n        }\n    }\n\n\n    const[animationInProgress, setAnimation] = useState(false)// ANIMACION EN PROGRESO DEL BOTON\n\n\n    let changeCssButton = (e)=>{// ANIMACION DEL BOTON\n       let value = e.currentTarget;\n       if(animationInProgress === false){\n           value.style.animation = 'buttonTranslate 0.2s normal forwards ease-out' \n           value.onanimationend = ()=>{\n               value.style.animation = 'none'\n           }\n       }\n    }\n//MOVER LA CALCULADORA ALREDEDOR DEL DIV APP, FUNCION ADAPTADA AL TUTORIAL DE JAVASCRIPT.INFO: https://javascript.info/mouse-drag-and-drop\nconst [isMoving, setMoving] = useState(false)\nconst app = useRef(0)\nconst calculator = useRef(0)\nconst [shiftX, setShiftX] = useState(0)\nconst [shiftY, setShiftY] = useState(0)\nlet onMouseDown = (e)=>{\n    if(isMoving === false){\n    setShiftX(e.clientX - calculator.current.getBoundingClientRect().left);\n    setShiftY(e.clientY - calculator.current.getBoundingClientRect().top);\n    setMoving(true)\n    onMouseMove(e.pageX, e.pageY)\n    }\n}\nlet onMouseMove = (pageX, pageY)=>{\n    if(isMoving === true){\n    calculator.current.style.position = \"absolute\";\n    calculator.current.style.zIndex = 1000;\n    calculator.current.style.left = pageX - shiftX + 'px';\n    calculator.current.style.top = pageY - shiftY + 'px';\n    }\n}\nlet mouseMoveTrigger = (e)=>{\n    onMouseMove(e.pageX, e.pageY) // PAGE X Y PAGE Y CORRESPONDEN A LA UBICACION DEL MOUSE RESPECTO DEL BORDE IZQUIERDO DE LA PAG\n}\n\n//FONTAWESOME\nconst [iconState, setIconState] = useState(0)\n\n\n//AÑADIR NUMEROS AL INPUT\n// CUANDO LLEGA AL VALOR MAXIMO AL AGREGAR e CAMBIA EL LENGTH A 20\nlet addNumbers = (e, numero)=>{\n    if(input.toString().length === 20){\n    setInput(input);\n    changeCssButton(e)\n    }\n    else{\n        setInput(parseInt(input + numero), 10);\n        changeCssButton(e)\n    }\n}\n\n// MANEJAR WINDOW RESIZE \n\n  useEffect(()=>{\n    window.addEventListener(\"resize\", ()=>{\n        calculator.current.style.position = \"relative\"\n        calculator.current.style.left = \"0px\"\n        calculator.current.style.top = \"0px\"\n    })\n  },[])\n\n// ON MOUSEUP SE LEVANTA EL MOUSE Y UTILIZAMOS EL DIV PADRE PARA TRACKEAR EL MOVIMIENTO/ EVENTOS \n    return (\n        <div className=\"App\" ref={app} onMouseUp={()=>{setMoving(false); setIconState(0)}} onMouseMove={(e)=>mouseMoveTrigger(e)}>\n            <div style={style.calculadoraContainer} ref={calculator} >\n                <div>\n                    <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"flex-end\", marginRight: \"25px\"}}>\n                    <FontAwesomeIcon style={iconState === 0 ? style.fontAwesomeDrag : style.fontAwesomeDragGrab} onMouseDown={(e)=>{onMouseDown(e); setIconState(1)}} icon={faMouse} />\n                    </div>\n                    <input\n                        ref={focusInput}\n                       // onChange={(e) => inputCheck(e.currentTarget.value)}\n                    // AL APRETAR ENTER SE RESUELVE LA OPERACION\n                        onKeyDown={(e) => e.key === \"Enter\" \n                        ? solveMath(e.currentTarget.value)\n                        : inputCheck(e.key)}\n                        onClick={()=>setInput(\"\")}\n                        style={style.input}\n                        autoFocus= {true}// CUANDO CARGA PODES USAR EL TECLADO PARA HACER CALCULOS! HACE FOCUS EN EL INPUT\n                        onBlur={()=>focusInput.current.focus()}\n                        value={input}/>\n                    <div>{message}</div>\n                </div>\n                <div style={{\n                    display: \"flex\"\n                }}>\n                    <div style={style.largeButtons} onClick={(e)=>{setValue(\"\");setMathOperation(\"\"); setInput(\"\"); changeCssButton(e)}}>C</div>\n                    <div style={style.topBottomButtons} onClick={(e)=>{inputCheck(\"/\"); changeCssButton(e)}}>%</div>\n                </div>\n                <div style={{\n                    display: \"flex\"\n                }}>\n                    <div style={style.littleSquares} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>addNumbers(e, \"7\")/*REMOVER EL 0 INICIAL AL INGRESAR UN VALOR NUEVO*/}>7</div>\n                    <div style={style.littleSquares} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>addNumbers(e, \"8\")}>8</div>\n                    <div style={style.littleSquares} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>addNumbers(e, \"9\")}>9</div>\n                    <div style={style.littleSquares} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>{inputCheck(\"*\"); changeCssButton(e)}}>X</div>\n                </div>\n                <div style={{\n                    display: \"flex\"\n                }}>\n                    <div style={style.littleSquares} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>addNumbers(e, \"4\")}>4</div>\n                    <div style={style.littleSquares} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>addNumbers(e, \"5\")}>5</div>\n                    <div style={style.littleSquares} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>addNumbers(e, \"6\")}>6</div>\n                    <div style={style.littleSquares} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>{inputCheck(\"-\"); changeCssButton(e)}}>-</div>\n                </div>\n                <div style={{\n                    display: \"flex\"\n                }}>\n                    <div style={style.littleSquares} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>addNumbers(e, \"1\")}>1</div>\n                    <div style={style.littleSquares} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>addNumbers(e, \"2\")}>2</div>\n                    <div style={style.littleSquares} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>addNumbers(e, \"3\")}>3</div>\n                    <div style={style.littleSquares} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>{inputCheck(\"+\"); changeCssButton(e)}}>+</div>\n                </div>\n                <div style={{\n                    display: \"flex\"\n                }}>\n                    <div style={style.largeButtons} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>addNumbers(e, \"0\")}>0</div>\n                    <div style={style.topBottomButtons} onAnimationStart={()=>{setAnimation(true)}} onAnimationEnd={()=>setAnimation(false)} onClick={(e)=>{solveMath(input); changeCssButton(e)}}>=</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","C:\\Users\\Laura\\Desktop\\calc\\calculadora\\src\\reportWebVitals.js",[],["23","24"],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":6,"column":10,"nodeType":"31","messageId":"32","endLine":6,"endColumn":17},{"ruleId":"29","severity":1,"message":"33","line":6,"column":19,"nodeType":"31","messageId":"32","endLine":6,"endColumn":30},{"ruleId":"29","severity":1,"message":"34","line":6,"column":32,"nodeType":"31","messageId":"32","endLine":6,"endColumn":40},{"ruleId":"29","severity":1,"message":"35","line":6,"column":42,"nodeType":"31","messageId":"32","endLine":6,"endColumn":54},{"ruleId":"25","replacedBy":"36"},{"ruleId":"27","replacedBy":"37"},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'faChild' is defined but never used.","Identifier","unusedVar","'faDiagnoses' is defined but never used.","'faTrophy' is defined but never used.","'faSignOutAlt' is defined but never used.",["38"],["39"],"no-global-assign","no-unsafe-negation"]